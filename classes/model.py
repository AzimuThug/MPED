import math
import numpy as np
import random

class Model:

    def trend_linear(self, N, a, b):
        t = np.arange(0, N, 1)
        x = a * t + b
        return x

    def exp(self, N, a, b):
        t = np.arange(0, N, 1)
        x = b * np.exp(a * t)
        return x

        # Test4

    def data_4(self):
        # Real = 70 bpm
        # Calculated manual = 66 bpm
        # Calculated Excel = 104 bpm (26 peaks counted vs 19 real)
        array = [238.8792, 238.644, 238.5026, 238.4576, 238.4478, 238.5104, 238.6198, 238.6504,
                 238.7483, 238.8468, 238.4592, 238.2925, 238.3057, 238.3517, 238.4048, 238.5513,
                 238.6332, 238.8281, 238.8849, 238.5391, 238.3975, 238.4199, 238.428, 238.5279,
                 238.6534, 238.9101, 238.9977, 239.0737, 239.1228, 238.7223, 238.5962, 238.5907,
                 238.5989, 238.6781, 238.7848, 238.9453, 239.0423, 239.0933, 238.6694, 238.5079,
                 238.5354, 238.5822, 238.6608, 238.8738, 238.9835, 239.0572, 239.1466, 239.041,
                 238.7303, 238.6772, 238.6748, 238.7358, 238.8238, 238.8954, 239.0203, 239.1926,
                 239.3433, 239.0011, 238.8035, 238.8087, 238.8084, 238.7603, 238.8654, 239.0035,
                 239.1477, 239.2468, 239.028, 238.8427, 238.7891, 238.8045, 238.7596, 238.8213,
                 238.9727, 239.0736, 239.1844, 239.3435, 239.1301, 238.8588, 238.7639, 238.9683,
                 239.0168, 239.1448, 239.1144, 239.1927, 239.2947, 239.4194, 239.5303, 239.2176,
                 238.9562, 238.9622, 238.9648, 238.9531, 238.9706, 239.0617, 239.1418, 239.2567,
                 239.3445, 238.9024, 238.6238, 238.6078, 238.4208, 238.4859, 238.5577, 238.6295,
                 238.7231, 238.8041, 238.9335, 238.8282, 238.4452, 238.3022, 238.2865, 238.3655,
                 238.4642, 238.5776, 238.6716, 238.8384, 238.9122, 239.072, 238.9556, 238.6451,
                 238.5423, 238.5749, 238.6134, 238.6992, 238.6674, 238.8596, 238.9985, 239.1172,
                 238.7348, 238.4859, 238.4403, 238.3436, 238.3949, 238.3704, 238.5245, 238.596,
                 238.75, 238.8483, 238.6587, 238.5142, 238.4619, 238.469, 238.5295, 238.511,
                 238.6502, 238.7007, 238.8082, 238.9589, 238.7345, 238.5261, 238.3611, 238.3158,
                 238.39, 238.4218, 238.5543, 238.6903, 238.806, 238.8258, 238.3348, 238.2555,
                 238.2857, 238.2969, 238.4251, 238.4782, 238.5885, 238.7056, 238.7104, 238.4962,
                 238.1571, 237.9731, 238.0095, 238.0357, 237.969, 238.0272, 238.3227, 238.4192,
                 238.5159, 238.5165, 237.8612, 237.7798]
        array = [array[i]-(sum(array) / len(array)) for i in range(180)]
        return array

        # Test5

    def data_5(self):
        # Real = 70 bpm
        # Calculated manual = 60 bpm
        # Calculated Excel = 64 bpm (16 peaks counted vs 15 real)
        array = [241.8164, 241.8164, 241.9524, 242.1241, 242.1241, 242.3053, 242.5485, 242.373,
                 242.373, 241.795, 241.6991, 241.6991, 241.6891, 241.6793, 241.7379, 241.8351,
                 241.9638, 241.949, 242.0613, 242.3044, 242.3385, 242.505, 242.5151, 242.2848,
                 241.9019, 241.8611, 241.8554, 241.8789, 241.9902, 242.0388, 242.2238, 242.2787,
                 242.3592, 242.433, 242.6225, 242.6225, 242.7164, 242.7742, 242.377, 242.1383,
                 242.1908, 242.2656, 242.3909, 242.4799, 242.4799, 242.5618, 242.6479, 242.8914,
                 242.8914, 242.6321, 242.4853, 242.421, 242.1565, 242.1587, 242.2951, 242.2951,
                 242.4928, 242.575, 242.575, 242.6912, 242.6836, 242.7597, 242.5029, 242.0959,
                 242.0685, 242.0378, 242.043, 242.0992, 242.2529, 242.2987, 242.433, 242.6339,
                 242.6339, 242.8188, 242.6327, 242.4835, 242.3682, 242.1653, 242.165, 242.1917,
                 242.1602, 242.2296, 242.2296, 242.1755, 242.1608, 242.2609, 242.2609, 242.4226,
                 242.2027, 241.9061, 241.9061, 241.859, 242.0282, 242.1183, 242.2684, 242.2718,
                 242.452, 242.6208, 242.6979, 242.7486, 242.6261, 242.0867, 242.0061, 241.9597,
                 241.9152, 241.9836, 242.1127, 242.1645, 242.3703, 242.4036, 242.4413, 242.5854,
                 242.2792, 242.2514, 241.9802, 242.0554, 241.9446, 241.974, 242.0029, 242.0707,
                 242.2345, 242.427, 242.4351, 242.5606, 242.6401, 242.488, 242.0884, 241.9963,
                 242.041, 242.0094, 242.0094, 242.0328, 242.1612, 242.3722, 242.3948, 242.5769,
                 242.6477, 242.7031, 242.7209, 242.5472, 242.388, 242.0693, 242.0682, 242.0824,
                 242.0824, 242.2133, 242.3978, 242.4171, 242.4171, 242.4611, 242.7194, 242.9094,
                 242.8057, 242.8057, 242.4039, 242.2549, 242.2549, 242.2574, 242.235, 242.2503,
                 242.358, 242.358, 242.5571, 242.57, 242.57, 242.7217, 242.8836, 242.9222, 242.9544,
                 242.9534, 242.4828, 242.4278, 242.3109, 242.3109, 242.2416, 242.2075, 242.246,
                 242.2787, 242.3328, 242.5073]
        array = [array[i]-(sum(array) / len(array)) for i in range(180)]
        return array

        # Test2

    def data_2(self):
        # Real = 107 bpm
        # Calculated manual = 102 bpm
        # Calculated Excel = 132 bpm (33 peaks counted vs 31 real)
        array = [222.4608, 222.4771, 222.396, 222.5603, 222.7707, 222.4794, 222.335, 222.3424,
                 222.5774, 222.9745, 223.0105, 222.76, 222.6027, 222.6483, 222.7442, 222.9195,
                 222.7469, 222.5241, 222.3071, 222.3877, 222.5294, 222.3277, 222.0096, 221.8835,
                 221.897, 221.9821, 222.2174, 221.7416, 222.0761, 222.1827, 222.4601, 222.7557,
                 222.7917, 222.5186, 222.5141, 222.6165, 222.9233, 222.9856, 222.4242, 222.2167,
                 222.3623, 222.4764, 222.6928, 222.8655, 222.6148, 222.6184, 222.5237, 222.8091,
                 223.1523, 223.4579, 223.5573, 223.372, 223.2072, 223.3833, 223.5939, 223.3994,
                 223.3854, 223.3459, 223.3573, 223.481, 223.5073, 223.0168, 222.8476, 222.6347,
                 222.6387, 222.87, 222.9794, 222.5957, 222.2617, 222.1728, 222.5891, 222.9677,
                 223.3047, 222.979, 222.9227, 222.9259, 223.1244, 223.3286, 223.3687, 223.0026,
                 222.8109, 222.8549, 223.061, 223.0608, 223.0405, 222.7372, 222.5098, 222.4252,
                 222.5712, 222.6774, 222.6536, 222.6712, 222.6835, 222.788, 223.1364, 223.3365,
                 223.2684, 222.8841, 222.8697, 222.9403, 223.1663, 223.402, 223.1502, 222.9372,
                 223.0421, 223.0365, 223.143, 223.2412, 223.0997, 222.926, 222.7092, 222.7919,
                 223.2711, 223.4773, 223.6594, 223.4533, 223.4698, 223.485, 223.6962, 223.8735,
                 223.9592, 223.6107, 223.4357, 223.4476, 223.6238, 223.8722, 223.9833, 223.6254,
                 223.6704, 223.6967, 223.7591, 223.9367, 223.9747, 223.7553, 223.6136, 223.7408,
                 224.0937, 224.1819, 224.4161, 224.0254, 223.8658, 223.9176, 224.0792, 224.3391,
                 224.5128, 224.1751, 223.9548, 224.117, 224.2085, 224.3214, 224.4606, 224.2883,
                 224.1401, 224.0208, 223.8556, 223.9052, 224.2361, 224.5999, 224.4243, 224.3976,
                 224.3567, 224.48, 224.8617, 225.2673, 224.7345, 224.5674, 224.546, 224.5931,
                 224.918, 225.0961, 224.648, 224.5169, 224.4801, 224.6144, 224.7704, 224.7752,
                 224.5369, 224.4328, 224.4957, 224.7917]
        array = [array[i]-(sum(array) / len(array)) for i in range(180)]
        return array


    def noise(self, N, R):
        noise = np.random.randint(R+10, size=(N)) - 10
        return noise

    @staticmethod
    def lin_rand_arr_flxd(seed, size):
        m = 32768
        a = 23
        b = 12345
        if size == 1:
            return math.ceil(math.fmod(a * math.ceil(seed) + b, m))
        r = [0 for i in range(size+1)]
        r[0] = math.ceil(seed)
        for i in range(1, size+1):
            r[i] = math.ceil(math.fmod((a * r[i - 1] + b), m))
        return r[1:size+1]

    def my_noise(self, seed, N, R):
        noise = self.lin_rand_arr_flxd(seed, N)
        my_noise = [i for i in range(N)]
        for i in my_noise:
            my_noise[i] = (((noise[i] - min(noise))/(max(noise)-min(noise)))-0.5)*2*R
        return my_noise

    def shift(self, inData, C, N1, N2):
        k = np.arange(N1, N2, 1)
        for i in range(N2-N1):
            inData[k[i]] += C
        return inData

    # Старая реализация
    # def spikes(self, inData, N, M, R, Rs):
    #     sampl = np.random.uniform(low=-Rs, high=Rs, size=(M,))
    #     signs = np.random.randint(2, size=M)
    #     for i in range(M):
    #         if signs[i] == 0:
    #             signs[i] = -1
    #         sampl[i] += Rs * signs[i]
    #     t_1 = random.sample(list(range(1, N + 1)), M)
    #     for i in range(M):
    #         inData[t_1[i]] += sampl[i]
    #     print(sampl)
    #     return inData

    def spikes(self, inData, N, M, R, seed):
        Rs = 0.1 * R
        sampl = self.my_noise(seed, M, Rs)
        signs = np.random.randint(2, size=M)
        for i in range(M):
            if signs[i] == 0:
                signs[i] = -1
            sampl[i] += Rs * R * signs[i]
        t_1 = random.sample(list(range(1, N + 1)), M)
        for i in range(M):
            inData[t_1[i]] += sampl[i]
        return inData

    def harm(self, N, A, f, dt):
        k = np.arange(0, N, 1)
        x = A*np.sin(2 * math.pi * f * dt * k)
        return x

    def polyHarm(self, N, A0, f0, A1, f1, A2, f2, dt):
        k = np.arange(0, N, 1)
        x0 = A0 * np.sin(2 * math.pi * f0 * dt * k)
        x1 = A1 * np.sin(2 * math.pi * f1 * dt * k)
        x2 = A2 * np.sin(2 * math.pi * f2 * dt * k)
        x = x0 + x1 + x2
        return x

    def windowing(self, data, N, L):
        for i in range(N-L, N):
            data[i] = 0
        return data

    def addModel(self, data1, data2, N):
        addResult = []
        for i in range(N):
            addResult.append(data2[i] + data1[i])
        return addResult

    def multModel(self, data1, data2, N):
        multResult = []
        for i in range(N):
            multResult.append(data2[i] * data1[i])
        return multResult